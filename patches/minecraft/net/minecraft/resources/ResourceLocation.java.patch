--- a/net/minecraft/resources/ResourceLocation.java
+++ b/net/minecraft/resources/ResourceLocation.java
@@ -38,6 +_,8 @@
         this.path = p_249394_;
     }
 
+    /** @deprecated Forge: Consider using {@link #fromNamespaceAndPath(String, String)} instead, as Mojang made this constructor private in 1.21 */
+    @Deprecated(forRemoval = true, since = "1.20.6")
     public ResourceLocation(String p_135811_, String p_135812_) {
         this(assertValidNamespace(p_135811_, p_135812_), assertValidPath(p_135811_, p_135812_), null);
     }
@@ -46,10 +_,14 @@
         this(p_135814_[0], p_135814_[1]);
     }
 
+    /** @deprecated Forge: Consider using {@link #parse(String)} instead, as Mojang made this constructor private in 1.21 */
+    @Deprecated(forRemoval = true, since = "1.20.6")
     public ResourceLocation(String p_135809_) {
         this(decompose(p_135809_, ':'));
     }
 
+    /** @deprecated Forge: Consider using {@link #bySeparator(String, char)} instead, as Mojang removed this method in 1.21 */
+    @Deprecated(forRemoval = true, since = "1.20.6")
     public static ResourceLocation of(String p_135823_, char p_135824_) {
         return new ResourceLocation(decompose(p_135823_, p_135824_));
     }
@@ -147,6 +_,12 @@
         return i;
     }
 
+    /** Normal compare sorts by path first, this compares namespace first. */
+    public int compareNamespaced(ResourceLocation o) {
+        int ret = this.namespace.compareTo(o.namespace);
+        return ret != 0 ? ret : this.path.compareTo(o.path);
+    }
+
     public String toDebugFileName() {
         return this.toString().replace('/', '_').replace(':', '_');
     }
@@ -278,6 +_,51 @@
 
         public JsonElement serialize(ResourceLocation p_135855_, Type p_135856_, JsonSerializationContext p_135857_) {
             return new JsonPrimitive(p_135855_.toString());
+        }
+    }
+
+    /** Forge: This is a backported method from 1.21, and is the replacement for {@link #ResourceLocation(String, String)}. */
+    public static ResourceLocation fromNamespaceAndPath(String namespace, String path) {
+        return new ResourceLocation(namespace, path);
+    }
+
+    /** Forge: This is a backported method from 1.21, and is the replacement for {@link #ResourceLocation(String)}. */
+    public static ResourceLocation parse(String location) {
+        return new ResourceLocation(location);
+    }
+
+    /**
+     * Forge: This is a backported method from 1.21, and acts as an alternative to using {@link #parse(String)}. If you
+     * know for sure you are going to be using the {@linkplain #DEFAULT_NAMESPACE default namespace}
+     * ({@code "minecraft"}), use this.
+     */
+    public static ResourceLocation withDefaultNamespace(String path) {
+        return new ResourceLocation(DEFAULT_NAMESPACE, assertValidPath(DEFAULT_NAMESPACE, path), null);
+    }
+
+    /** Forge: This is a backported method from 1.21, and is the replacement for {@link #of(String, char)}. */
+    public static ResourceLocation bySeparator(String location, char separator) {
+        return of(location, separator);
+    }
+
+    /**
+     * Forge: This is a backported method from 1.21, and is the same as {@link #bySeparator(String, char)} but returns
+     * {@code null} if a resource location cannot be created.
+     */
+    public static @Nullable ResourceLocation tryBySeparator(String location, char separator) {
+        int i = location.indexOf(separator);
+        if (i >= 0) {
+            String s = location.substring(i + 1);
+            if (!isValidPath(s)) {
+                return null;
+            } else if (i != 0) {
+                String s1 = location.substring(0, i);
+                return isValidNamespace(s1) ? new ResourceLocation(s1, s, null) : null;
+            } else {
+                return new ResourceLocation(DEFAULT_NAMESPACE, s, null);
+            }
+        } else {
+            return isValidPath(location) ? new ResourceLocation(DEFAULT_NAMESPACE, location, null) : null;
         }
     }
 }
